ORG 0;
GLAVNI	MOVE 10000, SP; //STACKPOINTER
	MOVE 1000, R4; //ADRESA ODREDIŠTA
	MOVE POD, R0; //POSTAVLJAM REGISTAR NA ADRESU IZNAD HALTA
PETLJA	LOAD R1, (R0);	//UZIMAM PODATAK IZ REGISTRA
	LOAD R5, (KONST); //USPOREDBA UVJETA ZA WHILE PETLJU
	CMP R1, R5;	//WHILE PETLJA
	JP_EQ END;	//AKO JE R1 JEDNAK 80008000 ZAVRSAVAM PETLJU
	LOADH R2, (R0);	//PRVA POLURIJEČ
	LOADH R3, (R0+2);//DRUGA POLURIJEČ
	SHL R2, 10, R2;	//NAMJEŠTANJE PREDZNAKA
	ASHR R2, 10, R2;
	SHL R3, 10, R3; //NAMJEŠTANJE PREDZNAKA
	ASHR R3, 10, R3;
	PUSH R2;	//STAVLJAM NA STOG PRVUPOLURIJEC	
	PUSH R3;	//STAVLJAM NA STOG DRUGU POLURIJEČ
	CALL COMP;	//POZIVAM POTPROGRAM

	ADD R0, 4, R0;
	STORE R6, (R4)
	ADD R4,4,R4
	JP PETLJA
END	HALT

KONST 	DW 80008000;
POD	DW 4321432C, 0FF7DBA, 548BB78B,0BADADEDA, 7C8A1B39, 80008000
MASKA DW 0FF000000
	
COMP    
        PUSH R0
        PUSH R1
        LOAD R0, (SP+10)
        LOAD R1, (SP+0C)
        MOVE 0, R6
        MOVE 0, R3
        XOR R0, R1, R1
        LOAD R2, (MASKA)
        
LOOP    CMP R3, 4
        JP_EQ KRAJ
        AND R1, R2, R0
        CMP R0, 0
        JP_EQ DODAJ_B
        OR R6, 0BB, R6
        JP POMAK
DODAJ_B OR R6, 0AA, R6
        JP POMAK
POMAK   CMP R3,3
        JP_EQ ZADNJI_KRUG
        ROTR R2, 8, R2
        SHL R6, 8, R6
ZADNJI_KRUG 
        ADD R3,1,R3
        JP LOOP
           
KRAJ
        POP R1
        POP R0
        
        RET